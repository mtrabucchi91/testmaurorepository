Sarà possibile personalizzare l'installazione effettuata tramite alcune configurazioni attraverso il comando "git config".
Il comando si occupa di caricare delle variabili d'ambiente necessarie per il funzionamento e l'utilizzo dell'applicazione all'interno dei file destinati ad archiviarle.

METTERE FOTO GITCONFIG



CREAZIONE DI UN ACCOUNT:
In Git i commit, che in pratica consistono nella memorizzazione delle istantanee di un progetto, fanno riferimento a chi li ha effettuati; 
ogni contributor dovrà quindi essere dotato di un username e di un indirizzo di posta elettronica che ne definiscano l’identità, informazioni che generando un 
account entreranno a far parte delle variabili globali utilizzate nel corso delle sessioni di lavoro.
La sintassi per la definizione dello username prevede l’utilizzo di un’istruzione basata sulla già citata funzionalità git config alla quale si dovrà passare l’opzione 
--global seguita dall’attributo user.name e dal parametro delimitato tramite apici singoli o doppi che rappresenta la stringa scelta dall’utente. Quindi, se per esempio 
si volesse associare al proprio account lo username “quattromori” si dovrà digitare dalla Bash un’istruzione come la seguente:

$ git config --global user.name 'quattromori'

Stessa procedura, con qualche differenza a livello di istruzione, per quanto riguarda l’email, la cui impostazione prevede l’impiego di git config e dell’opzione 
--global seguita da user.email e da un indirizzo di posta elettronica passato come argomento e non delimitato tramite apici.

$ git config --global user.email quattromori@latuaemail.com

Per verificare che le informazioni riguardanti l’identità scelta siano state registrate correttamente è possibile ricorrere alla già nota feature git config seguita 
dall’argomento relativo all’impostazione che si desidera controllare; per il controllo dello username si potrà quindi utilizzare un’istruzione come la seguente:

$ git config user.name
Copy
Basterà poi una semplice modifica a carico dell’argomento utilizzato per effettuare la stessa verifica sull’email:

$ git config user.email

La creazione di un account definisce un’identità che entrerà a far parte delle informazioni globali del DVCS, ciò però non significa che i dati ad essa associati 
sia immutabili; un aggiornamento dell’applicazione non modificherà i valori relativi ad username e email, ma l’utente potrà farlo in qualsiasi momento utilizzando 
le istruzioni precedentemente descritte con parametri differenti. Nel caso in cui per un determinato progetto si preferisca utilizzare un’identità diversa rispetto 
a quella definita in fase di configurazione, si potrà procedere con la medesima sintassi omettendo l’opzione --global.

$ git config user.name 'newuser'
$ git config user.email newuser@latuaemail.com
Copy
Queste istruzioni determineranno in pratica un override delle informazioni riguardanti l’account per il progetto corrente, 
senza modificare quelle registrate nelle variabili globali.


Per visualizzare un elenco completo delle impostazioni relative alla propria installazione basterà ricorrere nuovamente a git config passandole come argomento l’opzione --list:

$ git config --list
...
user.name=quattromori
user.mail=quattromori@latuaemail.com

VEDIAMO COME CREARE PROGETTI CON GIT:
Come prima cosa è necessario creare un area di lavoro, un progetto, ovvero un ambiente in cui vengano inserite le versioni dei nostri file.
Abbiamo due differenti modalità per creare un progetto con GIT:

1) Importazione: 
serve a creare un nuovo progetto a partire da una directory sul nostro filysystem che sarà importata nell'ambiente git;

2) Clonazione:
di una repository di git, quando pertanto è già esistente su un altro server per esempio GitHub.

COMANDO INIT PER CREARE UN NUOVO PROGETTO:
Creare un nuovo progetto Git significa trasformare la directory che ospita il nostro codice in un repository per il versioning. 
Nel gergo di Git questa operazione si chiama import e si svolge piuttosto semplicemente. Occorre solo spostarsi all’interno della directory che ci interessa e 
lanciare il comando init, in questo modo:

$ git init

Vediamo un esempio in cui creiamo nuova directory tramite il comando (mkdir nuovoProgettoGit), ci spostiamo al suo interno (cd nuovoProgettoGit) e lanciamo 
l’inizializzazione.

Una volta inizializzato il progetto con git init, troviamo nella nostra directory una sottodirectory già popolata chiamata .git. 
È la cartella che contiene l’intero repository e la sua struttura: se volessimo creare una copia di salvataggio del nostro repository sarebbe sufficiente duplicare 
la directory .git.

Siamo pronti per effettuare il primo commit a testimonianza del lancio del progetto corrente. I commit eseguiti durante l’attività di controllo di versione 
certificheranno tutti gli interventi effettuati a carico del progetto stesso. Nel caso dell’esempio proposto di seguito, la modifica al repository consisterà 
nell’aggiunta di una serie di file “.php“, di un file denominato README e nella generazione del primo commit:

$ git add *.php
$ git add README
$ git commit -m 'Initial Project Version'


